/******************************************************************************

                  版权所有 (C), 1999-2013, 烽火通信科技股份有限公司

******************************************************************************
   文 件 名   : spm_arp_proc.c
   版 本 号   : 初稿
   作    者   : xiaoxiang
   生成日期   : 2012年11月10日
   最近修改   :
   功能描述   : ARP表配置处理
   函数列表   :
   修改历史   :
   1.日    期   : 2012年11月10日
    作    者   : xiaoxiang
    修改内容   : 创建文件

******************************************************************************/

#define SHARED_DATA_TYPE SPM_SHARED_LOCAL

#include <nbase.h>
#include <spmincl.h>

#ifdef ARP_CFG

extern unsigned char arp_cfg_print_setting;

/*****************************************************************************
   函 数 名  : spm_rcv_dci_set_arp
   功能描述  : 处理ARP表的IPS消息
   输入参数  : ATG_DCI_SET_ARP *pstSetArp NBB_CCXT_T NBB_CXT
   输出参数  : 无
   返 回 值  :
   调用函数  :
   被调函数  :

   修改历史      :
   1.日    期   : 2012年11月10日
    作    者   : xiaoxiang
    修改内容   : 新生成函数

*****************************************************************************/
NBB_VOID spm_rcv_dci_set_arp(ATG_DCI_SET_ARP *pstSetArp NBB_CCXT_T NBB_CXT)
{
    NBB_CHAR ucMessage[SPM_MSG_INFO_LEN];
    NBB_BYTE ucMessageLen = 0;

    NBB_INT ret = SUCCESS;
    NBB_BYTE ucC3Unit = 0;
    SPM_ARP_CB *pstArp = NULL;
    SPM_LOGICAL_PORT_CB *pstLogicalPort = NULL;
    ATG_DCI_ARP_BASIC_DATA *pstBasicData = NULL;
    ARP_T stArp;

    NBB_BYTE *pucBasicDataStart = NULL;

    NBB_ULONG ulOperBasic = ATG_DCI_OPER_NULL;

    SPM_PORT_INFO_CB stPortInfo;

    ATG_DCI_ARP_KEY stArpKey;

    NBB_BYTE ucIfExist = ATG_DCI_EXIST;

    NBB_TRC_ENTRY("spm_rcv_dci_set_arp");

    /* 输入参数指针必须有效 */
    NBB_ASSERT(pstSetArp != NULL);

    if (pstSetArp == NULL)
    {
        NBB_TRC_FLOW((NBB_FORMAT "  ***ERROR***:spm_rcv_dci_set_arp(pstSetArp==NULL)"));

        OS_PRINTF("***ERROR***:spm_rcv_dci_set_arp(pstSetArp==NULL)\n");

        OS_SPRINTF(ucMessage,
            "***ERROR***:spm_rcv_dci_set_arp(pstSetArp==NULL)\n");
        BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);

        NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", 0, "",
                FUNC_IN_PARAM_IS_NULL, "FUNC_IN_PARAM_IS_NULL", ucMessage));
                

        goto EXIT_LABEL;
    }

    OS_MEMSET(&stPortInfo, 0, sizeof(SPM_PORT_INFO_CB));
    OS_MEMSET(&stArp, 0, sizeof(ARP_T));


    //首先将IPS消息的返回值设置为OK，如果有一个子配置失败，则置为FAIL
    pstSetArp->return_code = ATG_DCI_RC_OK;

    stArpKey.index = pstSetArp->key.index;
    stArpKey.ip_addr = pstSetArp->key.ip_addr;

    pstArp = AVLL_FIND(SHARED.arp_tree, &stArpKey);

    if (pstArp == NULL)       /* 如果条目不存在*/
    {
        ucIfExist = ATG_DCI_UNEXIST;
    }

    pstLogicalPort = AVLL_FIND(SHARED.logical_port_tree, &stArpKey.index);

    if ((pstLogicalPort == NULL) || (pstLogicalPort->basic_cfg_cb == NULL))
    {
        NBB_TRC_DETAIL((NBB_FORMAT "  ***ERROR***:INDEX=%ld IP_ADDR=%s ARP配置所在的逻辑端口不存在", stArpKey.index,
                spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT)));

        OS_PRINTF("***ERROR***:INDEX=%ld IP_ADDR=%s ARP所在的逻辑端口配置不存在!\n",
            stArpKey.index,
            spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT));

        OS_SPRINTF(ucMessage,
            "***ERROR***:INDEX=%ld IP_ADDR=%s ARP所在的逻辑端口配置不存在!\n",
            stArpKey.index,
            spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT));
        BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);

        NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", stArpKey.index, spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT),
                ARP_PD_LPORT_UNEXIST, "ARP_PD_LPORT_UNEXIST", ucMessage));
                
        pstSetArp->return_code = ATG_DCI_RC_ARP_NO_PORT;
        pstSetArp->basic_return_code = ATG_DCI_RC_UNSUCCESSFUL;

        goto EXIT_LABEL;
    }
    else    //如果存在且为L2接口，也没有arp
    {
        if (pstLogicalPort->basic_cfg_cb->port_route_type == ATG_DCI_L2)
        {
            NBB_TRC_DETAIL((NBB_FORMAT "  INDEX=%ld IP_ADDR=%s 的ARP配置存在，但不是L3接口", stArpKey.index,
                    spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT)));
            OS_PRINTF("INDEX=%ld IP_ADDR=%s 的ARP配置存在，但不是L3接口!\n", stArpKey.index,
                spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT));
            NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", stArpKey.index, spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT),
                    ARP_PD_LPORT_UNEXIST, "ARP_PD_LPORT_UNEXIST", ""));

            pstSetArp->return_code = ATG_DCI_RC_ARP_NO_PORT;
            pstSetArp->basic_return_code = ATG_DCI_RC_UNSUCCESSFUL;

            goto EXIT_LABEL;
        }
    }

    /* 获取子配置操作 */
    ulOperBasic = pstSetArp->oper_basic;

    //根据端口逻辑配置中的端口子类型，获取端口的port_id
    spm_get_portid_from_logical_port_index(pstSetArp->key.index, &stPortInfo NBB_CCXT);

    /* 删除整个条目 */
    if (pstSetArp->delete_struct == TRUE)
    {
        NBB_TRC_DETAIL((NBB_FORMAT "  删除INDEX=%ld IP_ADDR=%s 的ARP表配置", stArpKey.index,
                spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT)));

        /* 如果条目不存在，不删除 */
        if (ucIfExist == ATG_DCI_UNEXIST)
        {
            NBB_TRC_FLOW((NBB_FORMAT "  ***ERROR***:要删除的配置并不存在"));

            OS_PRINTF("***ERROR***:要删除的INDEX=%ld IP_ADDR=%s 的ARP配置不存在!\n",
                stArpKey.index,
                spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT));

            OS_SPRINTF(ucMessage,
                "***ERROR***:要删除的INDEX=%ld IP_ADDR=%s 的ARP配置不存在!\n",
                stArpKey.index,
                spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT));
            BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);

            NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", stArpKey.index, spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT),
                    ARP_PD_LPORT_UNEXIST, "ARP_PD_LPORT_UNEXIST", ucMessage));
                    
            pstSetArp->return_code = ATG_DCI_RC_OK;

            goto EXIT_LABEL;
        }

        /* 存在，删除 */
        else
        {
            NBB_TRC_FLOW((NBB_FORMAT "  查询到此配置，从tree中删除"));
            spm_dbg_print_arp_head(&stArpKey, SPM_OPER_DEL);
            spm_dbg_record_arp_head(&stArpKey, SPM_OPER_DEL);

#ifdef SPU
            ret = SUCCESS;

            //在本槽位的才删除芯片表相
            for (ucC3Unit = 0; ucC3Unit < SHARED.c3_num; ucC3Unit++)
            {
            	if (pstArp != NULL)
            	{
                	ret += ApiC3DelArp(ucC3Unit, pstArp->arp_pos_id);
				}
				
                if (ret != SUCCESS)
                {
                    NBB_TRC_DETAIL((NBB_FORMAT "  ***ERROR***:ApiC3DelArp() ret = %d", ret));

                    OS_PRINTF("***ERROR***:ApiC3DelArp() ret=%d\n", ret);

                    OS_SPRINTF(ucMessage, "***ERROR***:ApiC3DelArp() ret=%d\n", ret);
                    BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);

                    NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", stArpKey.index,
                            spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT), ret, "CALL_C3_FUNC_ERROR", ucMessage));
                            
                    pstSetArp->return_code = ATG_DCI_RC_DEL_FAILED;

                    goto EXIT_LABEL;
                }
            }

#endif
			if (pstArp != NULL)
			{
	            AVLL_DELETE(SHARED.arp_tree, pstArp->spm_arp_node);

	            //释放ARP表节点的内存空间
	            spm_free_arp_cb(pstArp NBB_CCXT);
			}
        }
    }

    /* 增加或更新条目 */
    else
    {

        /* 如果条目不存在，新申请内存空间保存数据 */
        if (ucIfExist == ATG_DCI_UNEXIST)
        {
            NBB_TRC_DETAIL((NBB_FORMAT "  增加INDEX=%ld IP_ADDR=%s 的ARP表配置", stArpKey.index,
                    spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT)));
            spm_dbg_print_arp_head(&stArpKey, SPM_OPER_ADD);
            spm_dbg_record_arp_head(&stArpKey, SPM_OPER_ADD);

            /* 申请一个新条目的内存空间 */
            pstArp = spm_alloc_arp_cb(NBB_CXT);

			if (pstArp != NULL)
			{
	            //插入到tree中
	            OS_MEMCPY(&pstArp->arp_key, &stArpKey, sizeof(ATG_DCI_ARP_KEY));

	            //coverity[no_effect_test]
	            AVLL_INSERT(SHARED.arp_tree, pstArp->spm_arp_node);
			}
        }
        else
        {
            NBB_TRC_DETAIL((NBB_FORMAT "  更新INDEX=%ld IP_ADDR=%s的 ARP表配置", stArpKey.index,
                    spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT)));
            spm_dbg_print_arp_head(&stArpKey, SPM_OPER_UPD);
            spm_dbg_record_arp_head(&stArpKey, SPM_OPER_UPD);
        }

        /***************************************************************************/
        /*                        获取配置，逐条处理                               */
        /***************************************************************************/
        /* 基本配置 */
        if (ulOperBasic == ATG_DCI_OPER_ADD)
        {

            /* 计算第一个entry的地址。*/
            pucBasicDataStart = (NBB_BYTE *)NTL_OFFLEN_GET_POINTER(pstSetArp, &pstSetArp->basic_data);

            /* 如果指针为NULL，无数据 */
            if (pucBasicDataStart == NULL)
            {
                NBB_TRC_FLOW((NBB_FORMAT "  ARP basic_data is NULL."));
                NBB_EXCEPTION((PCT_SPM | 7, 0, "lx", SHARED.spm_index));
            }
            else
            {
                pstBasicData = (ATG_DCI_ARP_BASIC_DATA *)pucBasicDataStart;

                if (arp_cfg_print_setting == SPM_PRINT_CFG)
                {
                    printf("  1）基本配置\n");
                    spm_dbg_print_arp_basic_cfg(pstBasicData);
                }

                OS_SPRINTF(ucMessage, "  1）基本配置\n");
                BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);
                
                //spm_dbg_record_arp_basic_cfg(pstBasicData);

                //打印配置
                NBB_TRC_DETAIL((NBB_FORMAT "  目的MAC = %x-%x-%x-%x-%x-%x", pstBasicData->des_mac[0],
                        pstBasicData->des_mac[1],
                        pstBasicData->des_mac[2],
                        pstBasicData->des_mac[3],
                        pstBasicData->des_mac[4],
                        pstBasicData->des_mac[5]));

#ifdef SPU
                ret = ApiC3InitArp(&stArp);

                if (ret != SUCCESS)
                {
					pstSetArp->basic_return_code = ATG_DCI_RC_UNSUCCESSFUL;
                	
                    NBB_TRC_DETAIL((NBB_FORMAT "  ***ERROR***: ApiC3InitArp ret=%d", ret));

                    OS_PRINTF("***ERROR***:ApiC3InitArp() ret=%d\n", ret);

                    OS_SPRINTF(ucMessage, "***ERROR***:ApiC3InitArp() ret=%d\n", ret);
                    BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);

                    NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", stArpKey.index,
                            spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT), ret, "CALL_C3_FUNC_ERROR", ucMessage NBB_CCXT));
                            
                    goto EXIT_LABEL;
                }
#endif

                //如果是虚拟以太网口
                if ((pstLogicalPort->basic_cfg_cb != NULL)
                    && (pstLogicalPort->basic_cfg_cb->port_sub_type == ATG_DCI_VE_PORT))
                {
                    stArp.mVeFlag = 1;
                }

                stArp.mIpv4 = stArpKey.ip_addr;
                stArp.mCardPort = stPortInfo.port_id;
                stArp.mSlot = stPortInfo.slot_id;

                //if (pstLogicalPort->logic_l3_cfg_cb != NULL)
                //{
                //    stArp.mVid = pstLogicalPort->logic_l3_cfg_cb->svlan;  //先不考虑两层VLAN的情况
                //}
                if( NULL == pstLogicalPort->basic_cfg_cb)
                {
                	pstSetArp->basic_return_code = ATG_DCI_RC_UNSUCCESSFUL;
                
                    NBB_TRC_DETAIL((NBB_FORMAT "  ***ERROR***:PORT_INDEX=%ld 的基本配置未下，ARP获取CONTROL VID失败",
                            stArpKey.index));

                    OS_PRINTF("***ERROR***:PORT_INDEX=%ld 的基本配置未下，ARP获取CONTROL VID失败\n",
                            stArpKey.index);

                    OS_SPRINTF(ucMessage,
                        "***ERROR***:PORT_INDEX=%ld 的基本配置未下，ARP获取CONTROL VID失败\n",
                            stArpKey.index);
                    BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);

                    NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", stArpKey.index,
                            spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT), BASIC_CONFIG_NOT_EXIST, "BASIC_CONFIG_NOT_EXIST", ucMessage));
				}
				else
				{
                	stArp.mVid = pstLogicalPort->basic_cfg_cb->control_vid;	
				}

                stArp.sVid = pstBasicData->svlan_id;
                stArp.cVid = pstBasicData->cvlan_id;

                OS_MEMCPY(stArp.dmac, pstBasicData->des_mac, ATG_DCI_MAC_LEN);

#ifdef SPU
                ret = SUCCESS;

                //在本槽位的才建立
                for (ucC3Unit = 0; ucC3Unit < SHARED.c3_num; ucC3Unit++)
                {
                    ret += ApiC3AddArp(ucC3Unit, &stArp);
                }

                /*如果存在，则先删再添加*/
                if ((ret == API_C3_E_EXISTS) || (ret == API_C3_E_EXISTS + API_C3_E_EXISTS))
                {
                    //ret = ApiC3DelArp(stPortInfo.unit_id, pstArp->arp_pos_id);
                    //NBB_TRC_DETAIL((NBB_FORMAT "  >>>>  ApiC3AddArp:  ret=%d", ret));

                    //ret += ApiC3AddArp(stPortInfo.unit_id, &stArp);
                    //NBB_TRC_DETAIL((NBB_FORMAT "  >>>>  ApiC3AddArp:  ret=%d", ret));

                    ret = SUCCESS;

                    for (ucC3Unit = 0; ucC3Unit < SHARED.c3_num; ucC3Unit++)
                    {
                         stArp.posId = pstArp->arp_pos_id;
                        ret += ApiC3ModArp(ucC3Unit, &stArp);
                        NBB_TRC_DETAIL((NBB_FORMAT "  >>>>  ApiC3ModArp: IPv4 ret=%d", ret));
                    }
                }

#endif
                if (ret == SUCCESS)
                {
                	if (pstArp != NULL)
                	{
	                    /* 保存数据 */
	                    if (pstArp->basic_cfg_cb == NULL)
	                    {
	                        pstArp->basic_cfg_cb = (ATG_DCI_ARP_BASIC_DATA *)NBB_MM_ALLOC(sizeof(ATG_DCI_ARP_BASIC_DATA),
	                            NBB_NORETRY_ACT,
	                            MEM_SPM_ARP_BASIC_CB);
	                    }

	                    pstArp->arp_pos_id = stArp.posId;

	                    OS_MEMCPY(pstArp->basic_cfg_cb, pstBasicData, sizeof(ATG_DCI_ARP_BASIC_DATA));
                	}
                }
                else
                {
                	pstSetArp->basic_return_code = ATG_DCI_RC_UNSUCCESSFUL;
                	
                    NBB_TRC_DETAIL((NBB_FORMAT "  ***ERROR***: ApiC3AddArp/ApiC3ModArp ret=%d", ret));

                    OS_PRINTF("***ERROR***:ApiC3AddArp/ApiC3ModArp() ret=%d\n", ret);

                    OS_SPRINTF(ucMessage, "***ERROR***:ApiC3AddArp/ApiC3ModArp() ret=%d\n", ret);
                    BMU_SLOG(BMU_INFO, SPM_L2_LOG_DIR, ucMessage);

                    NBB_EXCEPTION((PCT_SPM | ARP_PD, 0, "ld s d s s", stArpKey.index,
                            spm_set_ulong_to_ipv4(stArpKey.ip_addr NBB_CCXT), ret, "CALL_C3_FUNC_ERROR", ucMessage));
                            
                    goto EXIT_LABEL;
                }
                

            }
        }
        else if (ulOperBasic == ATG_DCI_OPER_DEL)
        {
            NBB_EXCEPTION((PCT_SPM | 7, 1, "lx", SHARED.spm_index));
        }
        else if (ulOperBasic == ATG_DCI_OPER_UPDATE)
        {
            NBB_EXCEPTION((PCT_SPM | 7, 2, "lx", SHARED.spm_index));
        }

    }

    //spm_snd_dci_ips((NBB_VOID*)pstSetArp, &(pstSetArp->ips_hdr) NBB_CCXT);

EXIT_LABEL: NBB_TRC_EXIT();


    return;

}

/*****************************************************************************
   函 数 名  : spm_init_arp_tree
   功能描述  : 初始化存储ARP配置的树
   输入参数  : 无
   输出参数  : 无
   返 回 值  :
   调用函数  :
   被调函数  :

   修改历史      :
   1.日    期   : 2012年11月24日
    作    者   : xiaoxiang
    修改内容   : 新生成函数

*****************************************************************************/
NBB_VOID spm_init_arp_tree(NBB_CXT_T NBB_CXT)
{
    NBB_BUF_SIZE avll_key_offset;

    NBB_TRC_ENTRY("spm_init_arp_tree");

    avll_key_offset = NBB_OFFSETOF(SPM_ARP_CB, arp_key);/*lint !e413 */

    //NBB_TRC_DETAIL((NBB_FORMAT "Key offset set to %ld", avll_key_offset));

    AVLL_INIT_TREE(SHARED.arp_tree, spm_arp_key_compare,
        (NBB_USHORT)avll_key_offset,
        (NBB_USHORT)NBB_OFFSETOF(SPM_ARP_CB, spm_arp_node));

    NBB_TRC_EXIT();
}

/*****************************************************************************
   函 数 名  : spm_alloc_arp_cb
   功能描述  : 申请ARP节点的内存空间
   输入参数  : NBB_CCXT_T NBB_CXT
   输出参数  : 无
   返 回 值  : SPM_ARP_CB
   调用函数  :
   被调函数  :

   修改历史      :
   1.日    期   : 2012年11月10日
    作    者   : xiaoxiang
    修改内容   : 新生成函数

*****************************************************************************/
SPM_ARP_CB *spm_alloc_arp_cb(NBB_CXT_T NBB_CXT)
{
    SPM_ARP_CB *pstArp = NULL;

    NBB_TRC_ENTRY("spm_alloc_arp_cb");

    /* 分配一个新的VC表配置条目。*/
    pstArp = (SPM_ARP_CB *)NBB_MM_ALLOC(sizeof(SPM_ARP_CB), NBB_NORETRY_ACT, MEM_SPM_ARP_CB);
    if (pstArp == NULL)
    {
        goto EXIT_LABEL;
    }

    /* 初始化VC表配置条目 */
    OS_MEMSET(pstArp, 0, sizeof(SPM_ARP_CB));
    pstArp->basic_cfg_cb = NULL;

    /* 建立用于该VC表配置条目的句柄，作为异步消息交换的相关器。*/
    pstArp->spm_arp_handle = NBB_CREATE_HANDLE(pstArp, HDL_SPM_ARP_CB);

    /* 成功分配一个新的接口物理配置条目。*/
    NBB_TRC_DETAIL((NBB_FORMAT "SPM_ARP_CB allocated at %p with handle %#lx",
            pstArp, pstArp->spm_arp_handle));

    /* Initialize the AVLL node. */
    AVLL_INIT_NODE(pstArp->spm_arp_node);

EXIT_LABEL: NBB_TRC_EXIT();

    return(pstArp);
}

/*****************************************************************************
   函 数 名  : spm_free_arp_cb
   功能描述  : 释放ARP表节点泊内存空间
   输入参数  : SPM_ARP_CB *pstArp NBB_CCXT_T NBB_CXT
   输出参数  : 无
   返 回 值  :
   调用函数  :
   被调函数  :

   修改历史      :
   1.日    期   : 2012年11月10日
    作    者   : xiaoxiang
    修改内容   : 新生成函数

*****************************************************************************/
NBB_VOID spm_free_arp_cb(SPM_ARP_CB *pstArp NBB_CCXT_T NBB_CXT)
{
    /***************************************************************************/
    /* Local Variables                                                         */
    /***************************************************************************/

    //NBB_INT i = 0;

    NBB_TRC_ENTRY("spm_free_arp_cb");

    /***************************************************************************/
    /* 检查控制块的正确性。                                                    */
    /***************************************************************************/
    NBB_ASSERT_MEMORY(pstArp, sizeof(SPM_ARP_CB), MEM_SPM_ARP_CB);

    if (pstArp == NULL)
    {
    	goto EXIT_LABEL;
    }
    
    /***************************************************************************/
    /* 删除单盘信息控制块。                                                    */
    /***************************************************************************/

    //NBB_TRC_FLOW((NBB_FORMAT "Free SPM_ARP_CB at %p", pstArp));
    NBB_TRC_FLOW((NBB_FORMAT "Free INDEX %d  IP_ADDR %s", pstArp->arp_key.index,
            spm_set_ulong_to_ipv4(pstArp->arp_key.ip_addr NBB_CCXT)));

    /***************************************************************************/
    /* 释放基本配置数据块。                                                */
    /***************************************************************************/
    if (pstArp->basic_cfg_cb != NULL)
    {
        NBB_MM_FREE(pstArp->basic_cfg_cb, MEM_SPM_ARP_BASIC_CB);
        pstArp->basic_cfg_cb = NULL;
    }

    /***************************************************************************/
    /* 删除控制块的句柄。                                                      */
    /***************************************************************************/
    NBB_DESTROY_HANDLE(pstArp->spm_arp_handle, HDL_SPM_ARP_CB);

    /***************************************************************************/
    /* 现在释放单盘信息控制块。                                                */
    /***************************************************************************/
    NBB_MM_FREE(pstArp, MEM_SPM_ARP_CB);
    pstArp = NULL;

    EXIT_LABEL: NBB_TRC_EXIT();

    return;
}

/*****************************************************************************
   函 数 名  : spm_free_all_arp_cb
   功能描述  : 释放arp配置所有的内存空间
   输入参数  : 无
   输出参数  : 无
   返 回 值  :
   调用函数  :
   被调函数  :

   修改历史      :
   1.日    期   : 2013年11月6日
    作    者   : zhangzhm
    修改内容   : 新生成函数

*****************************************************************************/

NBB_VOID spm_free_all_arp_cb(NBB_CXT_T NBB_CXT)
{
	SPM_ARP_CB *pstArp = NULL;
	
    for (pstArp = (SPM_ARP_CB*) AVLL_FIRST(SHARED.arp_tree);
         pstArp != NULL;
         pstArp = (SPM_ARP_CB*) AVLL_FIRST(SHARED.arp_tree))
    {
    	
		AVLL_DELETE(SHARED.arp_tree, pstArp->spm_arp_node);     	
    	spm_free_arp_cb(pstArp NBB_CCXT);
    }
}


#endif

